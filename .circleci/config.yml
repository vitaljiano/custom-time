version: 2.1
orbs:
  eb: circleci/aws-elastic-beanstalk@1.0.0
jobs:
  build:
    working_directory: ~/demo
    docker:
      - image: circleci/openjdk:11.0.2-jdk
    steps:
      - checkout:
          path: ~/demo
      - run:
          name: Build artifacts
          command: |
            mvn package
            zip -j demo-0.0.1.zip target/demo-0.0.1.jar Dockerfile 
      - store_artifacts:
           - path: demo-0.0.1.zip     
  deploy:
    working_directory: ~/demo
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - eb/setup
      - run:
          name: view-files
          command: |
            ls -a
           
      - run:
          command: |
              eb init elastic-demo-time-v1.6 -r $AWS_DEFAULT_REGION -p corretto
              eb deploy Elasticdemotimev16-env

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build





            #jobs:
  #  build:
  #    docker:
  #      # specify the version you desire here
  #      - image: cimg/openjdk:17.0.2
  #        #specify system properties
  #
  #        # Customize the JVM maximum heap limit
  #        # Specify our database service here
  #        # CircleCI maintains a library of pre-built images
  #      - image: mysql:8.0.27
  #        environment:
  #          MYSQL_ALLOW_EMPTY_PASSWORD: yes
  #          MYSQL_ROOT_PASSWORD: '123456789'
  #    working_directory: ~/repo
  #    steps:
  #      - checkout
  #      - run:
  #          name: Wait for Database Connection
  #          # preinstalled in circleci/* docker image
  #          command: dockerize -wait tcp://localhost:3306 -timeout 1m
  #      #install mysql client
  #      - run: sudo apt-get update && sudo apt-get dist-upgrade
  #      - run: sudo apt-get install mysql-client
  #      # create databases
  #
  #      - run: mysql -h 127.0.0.1 -u root -p123456789 -e "SET @@global.time_zone = UTC"
  #      - run: mysql -h 127.0.0.1 -u root -p123456789 -e "create database demo_time_test"
  #
  #      # Download and cache dependencies
  #      - restore_cache:
  #          keys:
  #            - v1-dependencies-{{ checksum "pom.xml" }}
  #            # fallback to using the latest cache if no exact match is found
  #            - v1-dependencies-
  #      - run: mvn dependency:go-offline
  #      - save_cache:
  #          paths:
  #            - ~/.m2
  #          key: v1-dependencies-{{ checksum "pom.xml" }}
  #          # run tests!
  #      - run:
  #          mvn -e test -DargLine="-Dspring.profiles.active=cicd"

  # eb/deploy:
  #    context: aws-creds
  #    environment-name: Elasticdemotimev14-env
  #      filters:
  #        branches:
  #          only:
  #            - master
  #    label: version-<<pipeline.number>>
  #      requires:
  #workflows:
  #  build_and_test:
  #    jobs:
  #      - build
  
